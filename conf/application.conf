# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="wqBa[iAX0E0KpoG[sHXw[GYFlwl9@r`C;No^iZ:^k1:7fqUkdy:IO>w[RqcmGu_U"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#

#db.default.driver=org.h2.Driver
#db.default.url="jdbc:h2:data/db;MODE=MYSQL"
#db.default.user=sa
#db.default.password=""
db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost/ace?autoReconnect=true"
db.default.user="root"
db.default.password=""


ebean.default="models.disabled.*"


# Set a connection's default isolation level
db.default.isolation=READ_COMMITTED

# In order to reduce lock contention and thus improve performance,
# each incoming connection request picks off a connection from a
# pool that has thread-affinity.
# The higher this number, the better your performance will be for the
# case when you have plenty of short-lived threads.
# Beyond a certain threshold, maintenance of these pools will start
# to have a negative effect on performance (and only for the case
# when connections on a partition start running out).
db.default.partitionCount=3

# The number of connections to create per partition. Setting this to
# 5 with 3 partitions means you will have 15 unique connections to the
# database. Note that BoneCP will not create all these connections in
# one go but rather start off with minConnectionsPerPartition and
# gradually increase connections as required.
db.default.maxConnectionsPerPartition=10


# The number of initial connections, per partition.
db.default.minConnectionsPerPartition=5

# When the available connections are about to run out, BoneCP will
# dynamically create new ones in batches. This property controls
# how many new connections to create in one go (up to a maximum of
# maxConnectionsPerPartition). Note: This is a per-partition setting.
db.default.acquireIncrement=1

# After attempting to acquire a connection and failing, try to
# connect this number of times before giving up.
db.default.acquireRetryAttempts=10

# How long to wait before attempting to obtain a
# connection again after a failure.
db.default.acquireRetryDelay=5 seconds

# Idle max age
db.default.idleMaxAge=200 seconds

db.default.timeout=10 seconds


# An initial SQL statement that is run only when
# a connection is first created.
db.default.initSQL="SELECT 1"

# If enabled, log SQL statements being executed.
db.default.logStatements=false



db.default.idleMaxAge=10 minutes

# This sets the time for a connection to remain idle before sending a test query to the DB.
# This is useful to prevent a DB from timing out connections on its end.


# The maximum time to wait before a call
# to getConnection is timed out.
db.default.connectionTimeout=20 seconds

# The maximum connection age.
#db.default.maxConnectionAge=15 minutes
db.default.maxConnectionAge=30 minutes


db.default.testOnBorrow=true
db.default.validationQuery="SELECT 1"


db.default.connectionTestStatement = "select 1"


db.default.idleMaxAge=10 minutes
db.default.idleConnectionTestPeriod=35 seconds
db.default.connectionTestStatement="SELECT 1"
#db.default.maxConnectionAge=30 minutes

application.session.sendOnlyIfChanged=true

# Set the custom user-agent
http.userAgent=ACenterA 1.0

# required higher body length..
parsers.text.maxLength=512K
parsers.formUrlEncoded.maxLength=4096K


#db.default.jndiName=DefaultDS



# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG


recaptcha.privatekey=""
recaptcha.publickey=""


application.url="/"
rabbitmq.host=localhost
rabbitmq.port=8080
rabbitmq.virtualhost="/temp"
rabbitmq.heartbeat=30
rabbitmq.timeout=300
rabbitmq.user=adm
rabbitmq.password=pass4life
rabbitmq.maxchannel=10
#rabbitmq.instancequeuename

play.emberjs.version="1.4.0"






#Mail Settings
smtp.host=""
smtp.port=2525
#smtp.ssl="no"
#smtp.tls="no"
smtp.user=""
smtp.password=""


mail.smtp.host=""
mail.smtp.user=""
mail.smtp.pass=""
#mail.smtp.channel=
mail.smtp.port=2525

mail.host=""
mail.user=""
mail.pass=""
#mail.channel=
mail.port=2525


privatekey="this is a secr3t sentense"
dev_default_user_password="demo"
ehcacheplugin=disabled
memcached.host="127.0.0.1:11211"



ticket.apikey=9777E6C9F454A5B1FA530D0140D73F26
ticket.create_endpoint="http://127.0.0.1:8082/internal/osticket/api/rest/index.php/create"
ticket.update_endpoint="http://127.0.0.1:8082/internal/osticket/api/rest/index.php/ticket/update"
ticket.close_endpoint="http://127.0.0.1:8082/internal/osticket/api/rest/index.php/ticket/close"
ticket.user="api@acentera.com"
ticket.password="ap14love"
db.default.hikaricp.file="conf/hikaricp.properties"
dbplugin=disabled
prefix=/
